package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"gateway/graph/model"
	"gateway/repositories"
	"gateway/services"
	"os"
	"strconv"
)

// Set course, student and enrollment URLs
const (
	defaultStudentURL = "http://localhost:8081"
	defaultCourseURL  = "http://localhost:8082"
	defaultEnrollmentURL = "http://localhost:8083"
)

var (
	studentURL     string
	courseURL      string
	enrollmentURL  string
	studentRepo    repositories.StudentRepository
	courseRepo     repositories.CourseRepository
	enrollmentRepo repositories.EnrollmentRepository
	studentService services.StudentService
	courseService  services.CourseService
	enrollenrollmentService services.EnrollmentService
)

func init() {
	// Check if the URL is set, if not set to default
	studentURL = os.Getenv("STUDENT_SERVICE_URL")
	if studentURL == "" {
		studentURL = defaultStudentURL
	}

	courseURL = os.Getenv("COURSE_SERVICE_URL")
	if courseURL == "" {
		courseURL = defaultCourseURL
	}

	enrollmentURL = os.Getenv("ENROLLMENT_SERVICE_URL")
	if enrollmentURL == "" {
		enrollmentURL = defaultEnrollmentURL
	}

	studentRepo = repositories.NewStudentRepository()
	courseRepo = repositories.NewCourseRepository()
	enrollmentRepo = repositories.NewEnrollmentRepository()

	enrollenrollmentService = services.NewEnrollmentService(enrollmentRepo, studentRepo, courseRepo)
	studentService = services.NewStudentService(studentRepo, enrollenrollmentService)
	courseService = services.NewCourseService(courseRepo, enrollenrollmentService)
}


// Student is the resolver for the student field.
func (r *queryResolver) Student(ctx context.Context, id string) (*model.Student, error) {
	studentID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid student ID: %w", err)
	}
	student, err := studentService.GetStudent(studentID)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch student: %w", err)
	}

	return student, nil
}

// Course is the resolver for the course field.
func (r *queryResolver) Course(ctx context.Context, id string) (*model.Course, error) {
	courseID, err := strconv.Atoi(id)
	if err != nil {
		return nil, fmt.Errorf("invalid course ID: %w", err)
	}
	course, err := courseService.GetCourse(courseID)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch course: %w", err)
	}

	return course, nil
}

// CreateStudent is the resolver for the createStudent field.
func (r *mutationResolver) CreateStudent(ctx context.Context, input model.StudentInput) (*model.Student, error) {
	student, err := studentService.CreateStudent(input)
	if err != nil {
		return nil, fmt.Errorf("failed to create student: %w", err)
	}
	return student, nil
}

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.CourseInput) (*model.Course, error) {
	course, err := courseService.CreateCourse(input)
	if err != nil {
		return nil, fmt.Errorf("failed to create course: %w", err)
	}
	return course, nil
}

// EnrollStudentInCourse is the resolver for the enrollStudentInCourse field.
func (r *mutationResolver) EnrollStudentInCourse(ctx context.Context, studentID string, courseID string) (*model.Course, error) {
	studentIDInt, err := strconv.Atoi(studentID)
	if err != nil {
		return nil, fmt.Errorf("invalid student ID: %w", err)
	}

	courseIDInt, err := strconv.Atoi(courseID)
	if err != nil {
		return nil, fmt.Errorf("invalid course ID: %w", err)
	}

	course, err := enrollenrollmentService.EnrollStudentInCourse(studentIDInt, courseIDInt)
	if err != nil {
		return nil, fmt.Errorf("failed to enroll student in course: %w", err)
	}
	return course, nil
}

// Students is the resolver for the students field.
func (r *queryResolver) Students(ctx context.Context) ([]*model.Student, error) {
	return studentService.GetStudents()
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	return courseService.GetCourses()
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
